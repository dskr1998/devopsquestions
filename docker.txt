1.what is virtualization ?
2.what is containarization ?
3.what are the adwantages/dis-advantages using virtualization ?
4.why containerization ? why not virtualization ?
5.what are the adv/dis-adv using containerization ?
6.when should we use virtualization ? when should we use containerization ?
7.How does the containers are kept isolated from each other running on the same machine?
  ans:- it uses 3 major features (i).linux name spaces  (ii).control groups  (iii).Union file system  
8.(i).what are linux namespaces ?
      ans:-  pid,net,uts,mts,ipc
  (ii).what is cgroups ?
      ans:-docker engine uses cgroups of the linux os in sharing the physical resources of the computer and limiting their usage\
 (iii).what union file system ?
      ans:-avoid duplicating a complete set of files each time you run an image as a new container.(200 mb,1 gb)
===========================================================================================================================
what is oci stands for ? what is it ?
ans:- oci stands for open container initiative specification
     it standardized the  (i).oci image  (ii).oci runtime
===========================================================================================================================
9.what is docker architecture ?
10.what is docker daemon,containerd(image),runc(container)?
 (i).containerd will do what ?
     ans:-it is a component build by docker team, which takes care of building images, pulling images from container registry,convert
	  docker images into oci image format and passes it as an input to the runc for running a docker container
11.what are docker objects ?
  ans:- (i).docker image  (ii).docker container  
12.docker image contains ?
  ans:- (i).application binary  (ii).s/w packages  (iii).instruction in running the application  (iv).bins/libs
13.what are the characteristics of docker image ?
-----------------------------------------------------------------------------------------------------
14.what is docker images are layered and stackable ?
  ans:-in our docker image we refer the existing base image called "goldcopy",in our image we hold the reference of the goldcopy or        baseimage only, ontop of it our application bits are placed and packaged.
15.why docker images are read-only? 
16.The docker what will uses writing the data into the container writable layer of the container ?
  ans:- storage drivers
17.what is docker container ?
**.what is the life time of docker container ?
  ans:-The lifetime the container is dependent on the amount of time the application running, once the application inside the               container terminates, the container will gets terminated.
---------------------------------------------------------------------------------------------
=========================================================================================================================
docker s/w upon install will create user and group what are those ?
  ans:- docker user and docker group
normla user can access the processes that are running on the docker engine ?
  ans:- normal user can-not access the docker images/containers which are running on the docker engine.because which are running on
        behalf of docker user.
=========================================================================================================================
18.docker workflow ?
  ans:-package -->  ship  -->deliver
19.how to run a docker container interactively?
  ans:- docker container run -it image:tag
20.When we run the above command docker engine what will do ?
21.how to see the running containers on the docker workstation or on docker daemon?
  ans:- docker container ls
22.How to see all the docker containers on the machine?
  ans:- docker container ls -a
23.How to remove the terminated container?
  ans:- docker container rm containerid/container name 	
24.what is the other way in seeing all the running containers ?
  ans:- docker container ps
25.How to stop an running container
  ans:- docker container stop containername/containerid
26.how to forcible stop and remove a running container?
  ans:- docker container rm -f containername/containerld
27.How to remove all the stopped/exited containers at one shot?
  ans:- docker container prune
--------------------------------------------------------------------------------------------
28.How to run a docker container as a daemon?
  ans:- docker container run -d image:tag
29.How to run a docker container with a given name?
  ans:- docker container run --name containername image:tag
30.How to launch a container that gets removed automatically upon termination?
  ans:- docker container run -d --name containername --rm image:tag
31.How to see the logs generated by the program running inside the container?
  ans:- docker container logs containername/containerid  (it will show all the operations which we performed)
32.How to enter into a daemon container that is running and grab the TTY or execute a command?
  ans:- docker container exec -it containername/id command  bash(or)
 	docker container attach id/name
33.How to see the details of a container?
  ans:- docker container inspect id/name
--------------------------------------------------------------------------------------------
mysql
-----
34.How to run an mysql server docker container?
  ans:- docker container run -d --name mysql -e MYSQL_ROOT_PASSWORD=root -p3306:3306 mysql:8.0.28
how to run the commands which will execute inside the container and shows the output in host machine ?
	docker exex containername mysql --version
	docker exec containername mysql -uroot -proot -e 'showdatabases;'
how to enter into the container ?
  ans:- docker exec -it containername mysql -uroot -proot 
  **how to connect to the database that is created inside the container ?
	docker run -e MYSQL_ROOT_PASSWORD=root -d -p 127.0.0.1:3307:3306 mysql:8.0.28
	mysql -uroot -proot -h 127.0.0.1 -P3307
  ans:- mysql -hipaddress -uroot -proot

***how to create mysql docker container ***
docker image pull mysql:8

==========================================================================================================================
oracle 
------
(i).login into docker 
(ii).pull the docker image 
	docker pull store/oracle/database-enterprise:12.2.0.1
(iii).run docker container 
	docker run -d -p 1521:1521 --name oracle store/oracle/database-enterprise:12.2.0.1
(iv).we can check logs of the container using below command
	docker logs -f containerid
(v).how to enter into the oracle docker container
	docker exec -it containername bash -c "source /home/oracle/.bashrc: sqlplus /nolog"
(vi).how to connect to the database
 	connect sys as sysdba;
(vii).alter session set "_ORACLE_SCRIPT"=true;
(viii).create a user
	create user satheesh identified by satheesh;
(ix).GRANT ALL PRIVILEGES TO satheesh;
(x).now gui open
	enter here connection_name : oracle_docker
		   username : satheesh
		   password : 
		   hostname : localhost
		   port     : 1521
	      service_name  : ORCLCDB.localdomain
	then connect.
(xi).


=============================================================================================================================
tomcat
------






























======================================================================================================================================

35.How to start an stopped container?
  ans:- docker container start containername/id
36.How to see all the docker images on the docker workstation or local cache?
  ans:-docker image ls
37.How to see the details of the image?
  ans:- docker image inspect image:tag
38.how to pull the docker image from the registry ?
  ans:- docker image pull image:tag
39.How to retag/add an alias name to an existing image?
  ans:-docker image tag image:tag newimage:newtag
40.How to remove an docker image?
  ans:- docker image rm image:tag
41.How to remove all the unused images on the workstation?
  ans:- docker image prune
42.how to remove the container along with image ?
  ans:- docker image rm -f image:tag
43.How to export an existing docker image on a machine?
  ans:-  docker image save image:tag -o filename.tar
44. How to load an docker image from an existing .tar file?
  ans:-docker image load -i filename.tar
45.How to push our own docker image into the docker container registry?
  ans:-docker image push repositoryname/image:tag
------------------------------------------------------------------------------------------------------
=======
5 april
=======
46.stop the docker engine
  ans:- sudo systemctl stop docker
47.move the docker home directory into /u01/dev directory
  ans:- sudo mv /var/lib/docker /u01/dev/
48.how to create symlink for docker home directory from another directory ?
  ans:- sudo ln -s /u01/dev/docker /var/lib/docker
48.how to start the docker 
  ans:- sudo systemctl start docker
=======================================================================================================
how to run tomcat as a container ?
  ans:- docker container run -d --name tomcat -p 8080:8080 tomcat:9.0
        docker container exec -it tomcat /bin/bash
        cd webapps.dist
        cp -R . ../webapps
        docker inspect tomcat
        goto browser ipaddress:8080
=======================================================================================================  
ss -ltn  (to see which port is connecting)
-----------------------------------------------------------------------------------------------------
49.what is docker directives ?
  ans:-The image building instructions that we write in the Dockerfile are called "docker directives".
50.how many types we can classify the docker directives ?
  ans:- two types (i).image build instructions  (ii).container instructions
51.What are the build image instructions that are there?
  ans:- FROM        ARG    ENV    RUN	ADD	WORKDIR		COPY  	LABEL
52.What are the container instructions?
  ans:- CMD 	EXPOSE 		ENTRYPOINT 	HEALTHCHECK	VOLUME
======================================================================================================================

what are the two aspects of building the dcoker images what are those ?
 1. while building the docker image we want to include all the immutable content inside the image like software application, dependent
 software packages etc which will be same across running any number of containers ontop of the image. To let the docker daemon
 include/package these immutable contents at the time of building the image we write in docker file image building instructions
	
2. container instructions that has to be used for launching the application packaged within the image, these instructions will be 
executed at the time of launching the container only
======================================================================================================================
53.what is docker build context ?
  ans:-The directory under which we run the docker buid is called "build context" since that directory contains all the artifacts that        are required/has to be included as part of the docker image
54.what is the recommended dir to create docker file ?
  ans:-always it is recommended to create a dedicated directory for each project in writing Dockerfile to build an image
55.how to create docker image by manually passing the docker file and build dir ?
  ans:- docker image build -t image:tag -f dockerfilelocation buildlocation
56.always the docker file starts with what ?
  ans:-FROM directive  (optionally parser directives)
57.parser directives should be written in where ?
  ans:- that should be written in first line only.
58.what are the parser directives ? how they looks like ?
  ans:- SYNTAX  ESCAPE  these will be written like comment   #SYNTAX       #ESCAPE
59.if you write the parser directives in middel or last in docker file insted of beggining of the file what will happen ?
  ans:- it will treat those as comments
60.what is mean by parser directive ?
  ans:-special instructions which are interpreted by the docker  engine  
61.what is syntax directive ?
  ans:-syntax is used for importing other docker file in which new syntaxes are defined.
62.by default parser directives will work ?
  ans:- by default will not.we need to enable backend toll called buildkit.
63.what are the advantages of using build kit ?
  ans:- (i).detects and skips transfering files from docker build context to the docker engine
	(ii). we can import external Dockerfiles in adding new directives and features in building images(parser directives 		are supported)  
	(iii). parallel build independent images   4. detects and skips unused build stages (layers)
         (iv).incrementally transfer only changed files in our build context b/w the builds.
64.how to enable buildkit ?
  ans:- export DOCKER_BUILDKIT=1
65.what ESCAPE directive ? 
  ans:-ESCAPE is used for defining a new symbol as an escape character instead of using "\".to ensure it works across all the 	platforms.    ex:- # escape=`
=============================================================================================================================
66.what FROM directive, why it is used ?
  ans:-FROM is an directive through which we tell docker engine to extend our image on top of base image
67.what is the syntax of FROM directive ?
  ans:- FROM --platform=platformname image:tag
68.example of FROM ?
  ans:- FROM --platform=linux/amd64 ubuntu:20.04
69.if you dont specify the platform in from directive what will happen ?
  ans:- it will take platform based on the environment which we are building the docker image.
70.what is the recommended way to use FROM directive ?
  ans:- always docker file should start with from directive only.optionally parser directives.
======================================================================================================================================
71.what ENV ? why it is used ?
  ans:- ENV is a directive used for defining environment variables to be passed while building the image, so that those variables are
 	available while executing the container.
72.how to run the s/w's which we installed at the time of building the image ?
  ans:- s/w's which we installed at the time of building the image we can not run them directly.we need to configure the path to that
        s/w's 
73.which variables we can define using ENV directive ?
  ans:- we can define static environment variables to be included as part of the image during build.
74.how to pass the env variables in docker file ?
  ans:- ENV JAVA_HOME=/u01/middleware/openjdk-11-jdk
 	ENV TOMCAT_HOME=/u01/middleware/apache-tomcat-9.50.1
75.what is the another way to pass the env variables to the docker image ?
  ans:-create env file and pass it as an input to the docker container while running the container
       docker container run image:tag --env-file=variables.env
76.can we override the env variables ?
  ans:- yes we can override the environment variables we defined as part of the image by passing them while launching the container.
**how to pass the env variables at the time of launching the container ?
  ans:-docker container run -e var1-val1 -e var2=val2 image:tag
==================================================================================================================================
77.what ARG directive ?
  ans:-passing arguments while building the image. We can parameterize the docker image build process through ARG. 
78.form where we can access the arguments ? where we can't ?
  ans:- The ARG we passed are only available within Dockerfile only and are not accessible during the runtime while running the         container
79.how to pass the arguments in docker file ?
  ans:- FROM ubuntu:20.04
	ARG JDK_PKG_NAME
	RUN apt update -y
	RUN apt install -y ${JDK_PKG_NAME}
    docker image build -t image:tag --build-arg=openjdk-11-jdk . 
80.the only directive that allowed before FROM directive as part of docker file is what ?
  ans:- ARG
81.if you declare the ARG directive before FROM directive ? where we can use it ?
  ans:- it is purposefully used for parameterizing the from directive only.it will not be accessible after from.
82.how to pass the values dynamically at the time of building the image and use it in runtime ?
  ans:-use arg directive for passing the values dynamically and use it in the env directive in docker file.
       ex:- FROM ubuntu:20.04
	    ARG username
	    ARG password
	    ARG result=pass
	    ENV username=${username}
	    ENV password=${password}
	    ENV results=${result}
     docker image build -t image:tag --build-arg username=satheesh --build-arg password=1234
===================================================================================================================================
83.why LABEL directive ?
  ans:- LABEL is an directive used for defining key=value pair in Dockerfile which is used for documentation of the image
84.Maintainer ?
  ans:- it is used for defining the author of the file.and it is deprecated.
===================================================================================================================================
85.why RUN directive is used ?
  ans:- run directive is used for running any command at the time of building the image.
86.when we run the RUN directive at the time building the image what will happen ?
  ans:-the output generated by the run directive will be written as a layer on top of the image.
87.what is the main reason for using run directive ?
  ans:- it is used for installing s/w's as part of the image 
88.how to create the directories using RUN directive ?
  ans:- RUN mkdir -p /u01/middeleware/softwares
89.how to install the s/w using RUN directive ?
  ans:- RUN apt update -y
	RUN apt install -t net-tools
90.when we update the cache using RUN apt update -y command what will happen ?
  ans:- it will update the cache and  the cache sits on the top of base image as a layer and after some time it will remove 	automatically.
 	(removed intermediate layer produced)
====================================================================================================================================
91.why copy directive is used ?
  ans:- copy directive used for copying the files from docker build context to docker image
92.how to copy the files from build context to docker image ?
  ans:- COPY srcfiles destfile
     ex:- FROM ubuntu:20.04
	  RUN mkdir -p /u01/middleware
	  COPY file1 /u01/middleware/file1
=================================================================================================================================
93.why ADD directive is used ?
  ans:- we can add the files from docker build context to docker docker image
94.how to add the files form build context to docker image ?
  ans:- add srcfile destfile
    ex:- FROM ubuntu:20.04
	 RUN mkdir /u01
	 ADD file1 /u01
95.what are the difference b/w copy and add directive ?
  ans:- COPY only copies the files from build context to docker image
	ADD copies the files from build context to docker image along with remote files also.it downloads the files form remote 	        machine based on url and add into image.
96.basic java project 

   project directory
   =================
	|-src
	  |-main
	    |-java
	      |-Main.java
            |-resources
	|-target
	  |-classes
	|-pom.xml
	|-dockerfile
 
pom.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<project>
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.satheesh</groupId>
	<artifactId>random</artifactId>
	<version>1.0</version>
	<properties>
		<maven.compiler.source>11<maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
	</properties>
</project>

Main.java
---------
package com.message.proj;
public class Main{
	public static void main(String[] args){
	System.out.println("hello satheesh program executed successfully");
   }
}

dockerfile
----------



======================================================================================================================================
volume :-
------
97.by default the application generated data will be written on where ?
  ans:- container writable layer
98.why the application storing the data in container writable layer ?
  ans:-keeping the docker image immutable/read only.
99.what are the drawbacks of storing the data in container writable layer ?
  ans:- (i).The container writable layer is attached to the container and will be destroyed once the container has been 	        	    terminated/destroyed. so that all the data produced by the application during its execution is lost
        (ii).There is a huge performance degradation in writing the data onto the Container Writable Layer
100.what is the recommend to use container writable layer ?
  ans:-It is recommended to write the non-critical or small amount of data onto the Container Writable Layer where we can survive even        of lost of information
101.containers are how many types ? what are those ?
  ans:- containers are two types (i).stateless container   (ii).statefull container
102.what is mean by stateless container ?
  ans:-the containers doesnt hold any data aspart of them which are called Stateless Containers.
103.what is mean by statefull container ?
  ans:-containers that generates the data which is by nature persistable data are called "Stateful" Containers
104.how to manage/write/store the data of containerized stateful applications being generated while running in docker container ?
  ans:-The docker has provided 2 ways of managing stateful containers in storing the data
        1. bind mounts
        2. docker volumes
105.what is mean by bind mounts ?
  ans:-We can mount the host machine directory onto the docker container using bind mounts, so that we can write the data generated by        the containerized application on the bind mounts of the container.
106.what is the advantage of using bind mount ?
  ans:-  Both the containerized application and host can see/use the data since it is stored on the host machine and mounted on the
 	 container
107.what are the dis-advantages of using bind-mount ?
  ans:-bind mounts works based on host filesystem, if the host platform is not compatible with the container platform, then there
           is a chance of running into data incompatibility issues in storing the data
	2. bind mounts are slow in read/writing the data when compared with docker volumes
	3. the docker engineer/devops engineer is responsible for manually managing the bind mounts like 	   create,backup,recovery/migrating

108.how many ways we can mount the host machine directory into the container ?
  ans:- there are two syntaxes are there (i).-v  or --volume      (ii).--mount
109.what is the syntax in mounting the host directory on to the container at the time of launching the container ?
  ans:- docker container run -v sourcedir:targetdir:propagation image:tag
	docker container run -it -v /u01/data:/u01/data:Z ubuntu:22.04 bin/bash
	docker container run -it --mount type=bind,source=/u01/data,target=/u01/data,shared ubuntu:22.04 bin/bash
110.what are the propagation settings available in -v and --mount ?
  ans:- ro = readonly
	z  = shared (we can reuse across multiple containers)
	Z  = private  (we can not reuse across multiple containers)
111.what are docker volumes ?
  ans:-docker volumes are the internal storage volumes managed by the docker engine into which a docker container can write the data        to persist it
112.how the docker engine writes the data into docker volumes ?
  ans:-The docker engine internally uses storage drivers in writing the data onto the docker volumes
113.what are the advantages of using docker volume ?
  ans:- 1. docker volumes works across the platforms, so there is no data incompatibility issues will creep up
	2. docker volumes can be created through docker cli
	3. docker volumes can be managed, backup and restored through the help of docker cli
	4. remote filesystem of an another computer can be mounted as a docker volume (nfs)
	5. docker volumes are more performant in terms of i/o when compared with bind mounts
114.how many ways we can work with docker volumes ?
  ans:- two ways.
	(i).we can manually create docker volume on the host computer using dockercli and can mount them onto the container using 		    their name,these are called "named volumes"
        (ii).we can directly declare VOLUME directive inside the Dockerfile, in this case, the docker engine creates the docker volume 
             automatically by generating an hash of the volume to identify it and mounts onto the docker container
115.how to create docker volume through docker cli ?
  ans:- docker volume create volumename
116.how to see the list of volumes ?
  ans:- docker volume ls
117.how to see the detailes of docker volume ?
  ans:- docker volume inspect volumename
118.how to delete volume ?
  ans:- docker volume rm volumename
119.how to mount docker volume into docker engine ?
  ans:- docker container run -it -v volumename:target:propagation image:tag /bin/bash
	docker container run -it --mount type=volume source=sourcedir,target=targetdir,propagation image:tag
120.how to work with volume directive ?
  ans:- declare the volume directive in docker file
121.how to declare the volume directive in docker file ?
  ans:- FROM ubuntu:20.04
	VOLUME["/u01"]
122.if we declare the volume directive in docker file what will happen ?
  ans:-creates an volume on the host machine automatically without name by generating an hashvalue to the volume to identity
       and mounts the volume onto the /u01 location of the container 
123.what is the dis-advantage of declareing docker volume in docker file ?
  ans:-volume doesnt have an name (b/c hash value)attached to it we cannnot mount this volume onto an another container
       (note :- we can mount but hash value is difficult to identify)
124.what is the recommended way to use docker volume ?
  ans:-always avoid using VOLUME directive as part of the Dockerfile.using docker volume by creating in docker cli.
125.How to copy a file into the volume of a running container?
  ans:-docker cp sourcefile containername:location
126.how to reuse the docker volume which we created by using docker directive in docker file ?
  ans:- docker container run -it -v hashvalue:target image:tag
======================================================================================================================================
127.is expose directive will expose the application which we declare in docker file ?
  ans:- no it will not expose.it is for documentation purpose only.containerized application is running on which port so that the user         who is launching the container can expose that port
128.is host can access the application that is running on the container ?
  ans:- no host can not access the container application
129.other machines can access the container application ?
  ans:- no other machines also can't access the container application since it is not on the host network.
130.how to enable container application to be accessible from the host network ?
  ans:- we need to enable/export portforwarding 
131.how to expose the docker container ?
  ans:- while launching the container we have to use -p switch to expose the container port on the host port
132.how to launch the container to expose it to the external world ?
  ans:- docker container run --name tomcat -it -p 8081:8080 tomcat:9.0
        after run this command we need to enter into the container
	 docker container exec -it tomcat /bin/bash      then
	 copy the contents of webapps.dist into webapps directory then run the ./startup.sh then we can access the tomcat server from 
	  host machine by using http://localhost:8081
=====================================================================================================================================
133.how to make the container as executable container ?
  ans:- by using CMD directive.
134.if you write the multiple CMD directive in docker file what will happen ?
  ans:- it will execute only last CMD.
135.how many ways we can write the CMD directive in docker file ? what are those ?
  ans:- 3 forms  (i).CMD["execute","param"]    (preferrable)(without shell)
		(ii).CMD["param1","param2"]   
	       (iii).CMD executable param1 param2    (shell form)
136.how to execute the CMD directive (command) without shell/bash ?
  ans:-by using CMD execute form.here variable expansion will not work.
137.how to execute the command using shell ?
  ans:- by using CMD shell form 
      (ex:- CMD echo "$HOME")  this command will execute by using shell
138.by using CMD execute form how to execute the command the using shell ?
  ans:-CMD["bash", "-c", "echo $HOME"]
139.how to override the CMD ?
  ans:- docker container run image:tag command
140.how many ways we can execute the multiple commands ?
  ans:- two ways (i).write commands in shellscript file and pass it as an input to the docker file
		(ii).we can write the CMD in shell form by concatinating 2 commands using 
			CMD cmd1 && cmd2     (or)
			CMD cmd1 ; cmd2
141.how to pass the shell script file as an input to the CMD directive ?
ans:-	COPY run.sh .
	RUN chmod u+x run.sh 
	CMD ["./run.sh"]
=====================================================================================================================================
142.how to override the ENTRYPOINT ?
  ans:- it is not possible.(we can override)
143.what is the difference b/w CMD and ENTRYPOINT ?
  ns:- while launching the container we can override CMD but ENTRYPOINT we can not.
144.if you write CMD before ENTRYPOINT how it will execute ?
  ans:-
145.if you write CMD after ENTRYPOINT how it will execute ?
  ans:-
146.what is the recommended to use both CMD and ENTRYPOINT ?
  ans:- make sure to both in execute form  (without shell form)
147.when using CMD along with ENTRYPOINT what is the way to use ?
  ans:- we can pass the CMD is only parameters.not commands.
148.how to use cmd after entrypoint ?
  ans:- ENTRYPOINT ["ls"]
	CMD ["-l"]
149.how to execute the docker container interactively while using ENTRYPOINT in dockerfile ?
					(or)
    How to override an ENTRYPOINT instruction written in a Dockerfile while running a container?
  ans:- use shell script file
	#!/bin/bash
	set -e
	nohup java -cp even.jar com.even.main.NumGen &
	exec $@
        docker container run -it -e N=10 image:tag bash 
150.what is exec command will do ?
  ans:- the exec will replace the current process with the process resulting from executing it's argument.
        inshort exec $@ will run the command given by the command line parameters in such a way that the current process is replaced
        by it.(if the exec is able to execute the command at all)
151.what set -e command in shell script ?
  ans:-exit immediatly if a command exits with a non-zero status.
150.How to run a docker container as an infinite container?
  ans:-	ENTRYPOINT[startup.sh]
        CMD [ "tail -f /dev/null" ]
151.how to keep the docker container running ?
  ans:- ENTRYPOINT ["apache-tomcat-9.0.50/bin/startup.sh"]
	CMD [tail -f /dev/null]
152.what are the possible stated a docker container can exists ?
  ans:- (i).created   (ii).running     (iii).paused     (iv).exited      (v).restarting     (vi).removed       (vii).dead
153.can we say what is the underlying status of the application packaged inside the container by looking at the status 
    of the container as "running" ?
  ans:- no we can not.
154.how to monitor the status/health of the application that is running in side the container ?
  ans:-use HEALTHCHECK directive
155.how to determine the health of the application ?
  ans:- by using HealthEndpoint
156.who will provide the healthendpoint ?
  ans:- developer of the application
157.insted of healthendpoint can we check the health of the application ?
  ans:- we can check the health of the application by frequently accessing the application.
158.what is drawbacks of frequently accessing the application ?
  ans:-it will generates the traffic and slows down the performance of the application.
159.by using HealthendPoint how it will not impact on the performance of the application ?
  ans:-it will performs some preliminary checks to determine health of the application and returns success/failure.
160.if you write the HEALTHCHECK directive in dockerfile what will happen ?
  ans:-along with container status as UP it shows whether application running inside it is (healthy/unhealthy)	
161.what is the syntax of writing HEALTHCHECK direcive in docker file ?
  ans:-HEALTHCHECK [options] CMD [commandToVerifyTheEndpoint]
162.what are the options we can pass to the HEALTHCHECK directive ?
  ans:- --interval=ms how frequent intervals at which it has to execute the CMD we supplied to determine the status of the application
	--timeout= ms  how long should we wait for getting a response from the HEALTHCHECK CMD
	--start-period=ms millisecond to be waited before starting the HEALTHCHECK to allow application to start
	--retries=N how many retries it has to do before reporting the application failure status
=====================================================================================================================================
163.docker networking works based on what ?
  ans:-docker networking works based on network drivers
164.docker by default supports how many modes of networking ?
  ans:- 5 modes (i).bridge network  (ii).host   (iii).overlay     (iv).mcvlan        (v).none
165.what is the default mode in which a docker container run ?
  ans:- bridge network
166.all the containers that we launch by default will connected which network ?
  ans:- default bridge network that is created on the docker engine.
167.containers which are connected to default bridge can communicate with each other ?
  ans:- yes
168.how to isolate the containers from another containers that are running on the docker engine ?
  ans:-by creating our own bridge network.then connect the containers to that network for isolate.
169.what are the advantages of using our own bridge network in launching the container rather than using default bridge ?
  ans:- 1. dns resolution
	2. we can customize the configurations and ip tables of the network
	3. we can attach and detach containers onfly at runtime
170.how to create our own bridge network ?
  ans:-docker network create bridgename
171.how to remove bridge ?
  ans:- docker network rm bridgename
172.how to connect the container to the bridge network ?
  ans:- docker network connect bridgename containername
173.how to dis-connect the container to the bridge network ?
  ans:- docker network disconnect bridgename containername
174.show the list of network adapters available on the docker engine ?
  ans:-docker network ls
175.how to launch the container by using bridge network ?
  ans:- docker network create bridge1
	docker container run --name java --bridge bridge1 -p 8080:8080 	image:tag
	docker container run --name mysql --bridge bridge1 -p 3306:3306 image:tag
176.when we run the container under the host network what will happen ?
  ans:-the container will be running on the host network.
177.when we run the container under the host network then host can communicate with container ?
  ans:- yes host can communicate with container.portforwarding not required.
178.what is the use of overlay ?
  ans:- using which docker container of one docker workstation can communicate with container of another docker engine/wworkstation.
179.what macvlan ?
  ans:-it will allows to attach mac address to docker container.appearing it as physical network adapter.the docker engine will 
	routes the network traffic to a specific container based on mac address.
180.none means ?     no networking
181.how many host network we can create ?
  ans:- there is only one host network per docker engine will be created.
-------------------------------------------------------------------------------------------------------------------------------------
JCR SETUP :-
---------
1.how to host our own registries ?
  ans:- by using container registry softwares.
2.what are the container registry s/w available in the market ?
  ans:- (i).jfrog jcr
	(ii).nexus
3.to perfrom pulling and pushing images to our own organization repository we need authenticate by login to the server.how ?
  ans:- docker login jcrhub.com
	username: username
	password: pwd
4.what is the syntax of publish the images into the local docker repository ?
  ans:-docker image publish repositoryserveraddress/repositoryname/image:tag
5.how to build the image ?
  ans:- we need to build the image tag/name matching with serveraddress/repositoryname/image:tag
	docker image build -t jcrhub.com/docker/sailor:1.0 .
6.how to publish the docker image into docker container registry ?
  ans:-docker image publish jcrhub.com/docker/sailor:1.0
7.****jfrog jcr requires domain name resolution to work****
8.jcr registry by default will run which port ?
  ans:- 8082
9.how to configure the hostname in localhost
  ans:- vi /etc/hosts
        127.0.0.1   jcrhub.com

=====================================================================================================================================
RUN MULTI-TIER APPLICATION
--------------------------
docker network create urotaxinetwork
docker volume create urotaxidbvol
git clone giturl
docker container run --name urotaximysqldb --network urotaxinetwork --mount type=volume,source=urotaxidbvol,target=/var/lib/mysql
 -e MYSQL_ROOT_PASSWORD=welcome1 -d mysql:8.0.28
docker cp src/main/db/urotaxidb.sql urotaximysqldb:/home/root
docker container exec -it urotaximysqldb bash
mysql -uroot -pwelcome1 < urotaxidb.sql
docker image build -t jcrhub.com/ubuntu/urotaxi:1.0 .
docker container run --name urotaxi --network=urotaxinetwork -p 8080:8082 --env-file=variables.env -d jcrhub.com/docker/urotaxi:1.0
docker container exec -it urotaximysqldb bash
mysql -uroot -proot
use urotaxidb;
select * from ride;

dockerfile
----------
FROM jcrhub.com/docker/ubuntu:20.04
RUN mkdir -p /u01/applications
RUN apt update -y
RUN apt install -y openjdk-11-jdk
RUN apt install -y curl
WORKDIR /u01/applications
COPY target/urotaxi-1.0.jar
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD curl http://localhost:8082/actuator/healthcheck
ENTRYPOINT [ "java", "-jar", "./urotaxi-1.0.jar" ]





=============================================================================================================================


59.what is docker buildkit ?
62.how to enable buildkit ?                                                     ans:-export DOCKER_BUILDKIT=1
------------------------------------------------------------------------------------------------------------------------------------
63.what is the syntax of FROM directive ?				 	ans:-FROM --platform=linux/amd64 ubuntu:22.04
64.if we don't provide the platform in form directive who will 
   identify the approprite image for platform flexible ?			ans:-containerd
-------------------------------------------------------------------------------------------------------------------------------------
65.what ENV directive ?
***.How many ways we can work with environment variables?                       ans:-2 wyas 1.buildtime variables 2. runtime variables
66.how many ways we  can pass the env variables ?                               ans:-2 ways (i).dockerfile  (ii).at container run time
67.how many ways we can pass env variables at container run time ?              ans:-2 ways (i).variables   (ii).variables file
68.how to pass variables at container runtime ?					ans:-docker container run -e VAR1=VAL1 -e VAR2=VAL2 image:tag
										    docker container run --env-file=vars.env image:tag
69.if environment variables are static in nature then which is the
   recommended way to pass env variables ?                                      ans:-define them as part of the image.
70. if environment variables are dynamic in nature then which is the
   recommended way to pass env variables ?					ans:-while running the container pass environment variables as an input
71.how to override the env variables ?						ans:-while running the container.

-------------------------------------------------------------------------------------------------------------------------------------
72.how to pass the arguments while building the image ?			        ans:-using arg directive.
73.how to pass the arguments at the time of building the image ?                ans:-docker image build -t img:tag --build-arg arg=value
74.difference b/w arg and env which one used when ?
75.how to pass the values at the time of building the image ?			ans:-using arg 
76.how to pass the values at the time of running the container ?		ans:-use env
77.what is the only directive that is allowed before from directive ?           ans:-arg
78.if we use arg dir before from directive where we can use that ?              ans:-it is purposefully used for parameterizing the 
										     from only.
79.if we want to pass input dynamically at the time of building the image
   and should be accessible while running the container?			ans:-We can take the dynamic input at buildtime using
										     ARG and set it as an ENV inside the dockerfile	 
80.1.how to mount the file/dir inside the container into host machine ?
  ans:-docker container run -it -v soursedir:destinationdir:Z image:tag bin/bash





